% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/irp_predict_transmission_mir.R
\name{irp-predict-transmission-mir}
\alias{irp-predict-transmission-mir}
\alias{irp_holocellulose_content_2}
\alias{irp_klason_lignin_content_2}
\alias{irp_eac_1}
\alias{irp_edc_1}
\alias{irp_carbon_content_1}
\alias{irp_nitrogen_content_1}
\alias{irp_hydrogen_content_1}
\alias{irp_oxygen_content_1}
\alias{irp_phosphorus_content_1}
\alias{irp_potassium_content_1}
\alias{irp_sulfur_content_1}
\alias{irp_titanium_content_1}
\alias{irp_silicon_content_1}
\alias{irp_calcium_content_1}
\alias{irp_d13C_1}
\alias{irp_d15N_1}
\alias{irp_nosc_1}
\alias{irp_dgf0_1}
\alias{irp_bulk_density_1}
\alias{irp_loss_on_ignition_1}
\alias{irp_O_to_C_1}
\alias{irp_C_to_N_1}
\alias{irp_H_to_C_1}
\alias{irp_volume_fraction_solids_1}
\alias{irp_non_macroporosity_1}
\alias{irp_macroporosity_1}
\alias{irp_saturated_hydraulic_conductivity_1}
\alias{irp_specific_heat_capacity_1}
\alias{irp_dry_thermal_conductivity_1}
\alias{irp_microbial_nitrogen_content_1}
\title{Predicts peat properties from transmission mid infrared spectra}
\source{
\describe{
\item{\code{irp_holocellulose_2()}, \code{irp_klason_lignin_2()}}{
\insertCite{Teickner.2022a;textual}{irpeat}.
}
\item{\code{irp_eac_1()}, \code{irp_edc_1()}}{
\insertCite{Teickner.2022;textual}{irpeat}.
}
\item{\code{irp_microbial_nitrogen_content_1()}}{
\insertCite{Reuter.2020;textual}{irpeat}
}
\item{All other models}{
\insertCite{Teickner.2023;textual}{irpeat}
}
}
}
\usage{
irp_holocellulose_content_2(
  x,
  ...,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  return_as_list = FALSE,
  check_prediction_domain = "train"
)

irp_klason_lignin_content_2(
  x,
  ...,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  return_as_list = FALSE,
  check_prediction_domain = "train"
)

irp_eac_1(
  x,
  ...,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  return_as_list = FALSE,
  check_prediction_domain = "train"
)

irp_edc_1(
  x,
  ...,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  return_as_list = FALSE,
  check_prediction_domain = "train"
)

irp_carbon_content_1(
  x,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  check_prediction_domain = "train",
  return_as_list = FALSE
)

irp_nitrogen_content_1(
  x,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  check_prediction_domain = "train",
  return_as_list = FALSE
)

irp_hydrogen_content_1(
  x,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  check_prediction_domain = "train",
  return_as_list = FALSE
)

irp_oxygen_content_1(
  x,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  check_prediction_domain = "train",
  return_as_list = FALSE
)

irp_phosphorus_content_1(
  x,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  check_prediction_domain = "train",
  return_as_list = FALSE
)

irp_potassium_content_1(
  x,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  check_prediction_domain = "train",
  return_as_list = FALSE
)

irp_sulfur_content_1(
  x,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  check_prediction_domain = "train",
  return_as_list = FALSE
)

irp_titanium_content_1(
  x,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  check_prediction_domain = "train",
  return_as_list = FALSE
)

irp_silicon_content_1(
  x,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  check_prediction_domain = "train",
  return_as_list = FALSE
)

irp_calcium_content_1(
  x,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  check_prediction_domain = "train",
  return_as_list = FALSE
)

irp_d13C_1(
  x,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  check_prediction_domain = "train",
  return_as_list = FALSE
)

irp_d15N_1(
  x,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  check_prediction_domain = "train",
  return_as_list = FALSE
)

irp_nosc_1(
  x,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  check_prediction_domain = "train",
  return_as_list = FALSE
)

irp_dgf0_1(
  x,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  check_prediction_domain = "train",
  return_as_list = FALSE
)

irp_bulk_density_1(
  x,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  check_prediction_domain = "train",
  return_as_list = FALSE
)

irp_loss_on_ignition_1(
  x,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  check_prediction_domain = "train",
  return_as_list = FALSE
)

irp_O_to_C_1(
  x,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  check_prediction_domain = "train",
  return_as_list = FALSE
)

irp_C_to_N_1(
  x,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  check_prediction_domain = "train",
  return_as_list = FALSE
)

irp_H_to_C_1(
  x,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  check_prediction_domain = "train",
  return_as_list = FALSE
)

irp_volume_fraction_solids_1(
  x,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  check_prediction_domain = "train",
  return_as_list = FALSE,
  bulk_density = NULL
)

irp_non_macroporosity_1(
  x,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  check_prediction_domain = "train",
  return_as_list = FALSE,
  bulk_density = NULL
)

irp_macroporosity_1(
  x,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  check_prediction_domain = "train",
  return_as_list = FALSE,
  bulk_density = NULL
)

irp_saturated_hydraulic_conductivity_1(
  x,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  check_prediction_domain = "train",
  return_as_list = FALSE,
  bulk_density = NULL
)

irp_specific_heat_capacity_1(
  x,
  temperature = 273.15,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  check_prediction_domain = "train",
  return_as_list = FALSE,
  nitrogen_content = NULL
)

irp_dry_thermal_conductivity_1(
  x,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  check_prediction_domain = "train",
  return_as_list = FALSE,
  bulk_density = NULL
)

irp_microbial_nitrogen_content_1(
  x,
  y,
  do_summary = FALSE,
  summary_function_mean = mean,
  summary_function_sd = stats::sd,
  check_prediction_domain = "train",
  return_as_list = FALSE
)
}
\arguments{
\item{x}{An object of class \code{\link[ir:ir_new_ir]{ir}} with transmission mid
infrared spectra. Some tests are applied to check if the supplied spectra
match the spectra used to fit the models (the spectral range is checked). The
spectral resolution of the original spectral data should not be smaller than
4 cm\eqn{^{-1}} and it is not checked if this assumption is met. For the
following models, \code{x} has special meaning:
\describe{
\item{\code{irp_microbial_nitrogen_content_1()}}{Here, \code{x} is a set of litter
spectra after decomposition (and \code{y} is a set of litter spectra before
decomposition). See the Details section.}
}}

\item{...}{Additional arguments passed to
\code{\link[rstanarm:posterior_predict.stanreg]{rstanarm::posterior_predict.stanreg()}} (\code{irp_eac_1()},\code{irp_eac_2()}).}

\item{do_summary}{A logical value indicating if the predicted values should
be returned in a summarized version (\code{TRUE}) or not (\code{FALSE}).
\itemize{
\item If \code{do_summary = FALSE}, a list column is returned and each
element of the list column is a numeric vector, or an \code{rvar} object is
returned as column in \code{x}, depending on the value of \code{return_as_list}. In
both cases, the column contains draws from the posterior predictive
distribution.
\item If \code{do_summary = TRUE}, each element is a
\code{\link[quantities:quantities]{quantities::quantities()}} object with value and error summarized from
posterior draws via \code{summary_function_mean} and \code{summary_function_sd}
}}

\item{summary_function_mean}{A function used to summarize the predicted
values (average).}

\item{summary_function_sd}{A function used to summarize the predicted
values (spread).}

\item{return_as_list}{Logical value. If set to \code{TRUE}, the result will be
returned as list of draws, otherwise the result will be returned as \code{rvar}
object. This is a new argument currently only implemented for models
predicting the degree of decomposition.}

\item{check_prediction_domain}{A character value indicating if and how it
should be checked whether the spectra in \code{x} are within the prediction domain
of the model. One of:
\describe{
\item{\code{"train"}}{It is checked whether the spectra in \code{x} are within the
prediction domain formed by the training data for the model.}
\item{\code{"test"}}{It is checked whether the spectra in \code{x} are within the
prediction domain formed by the testing data for the model.}
\item{\code{"none"}}{It is not checked whether the spectra in \code{x} are within the
prediction domain for the model.}
}}

\item{bulk_density}{For \code{irp_porosity_1()}, \code{irp_non_macroporosity_1()},
\code{irp_macroporosity_1()}, \code{irp_volume_fraction_of_solids_1()},
\code{irp_saturated_hydraulic_conductivity_1()},
\code{irp_dry_thermal_conductivity_1()}: One of:
\describe{
\item{1.}{A numeric vector with the same number of elements as spectra in
\code{x} with values for the dry bulk density in g cm\eqn{^{-3}}. These values
will be used to predict the peat property.}
\item{2.}{A list with the same number of elements as spectra in \code{x}. Each
element must be a numeric vector with the same number of elements as there
are MCMC draws in the corresponding model to use. Each numeric value is the
the dry bulk density in g cm\eqn{^{-3}}. These values will be used to
predict the peat property.}
\item{3.}{\code{NULL}: Dry bulk density will be estimated from the spectra in \code{x}
and these estimates will be used to predict the peat property.}
}}

\item{temperature}{For \code{irp_specific_heat_capacity_1()}: The temperature in K
for which to predict the specific heat capacity.}

\item{nitrogen_content}{For \code{irp_specific_heat_capacity_1()}: One of:
\describe{
\item{1.}{A numeric vector with the same number of elements as spectra in
\code{x} with values for the nitrogen content in g g\eqn{^{-1}}. These values
will be used to predict the peat property.}
\item{2.}{A list with the same number of elements as spectra in \code{x}. Each
element must be a numeric vector with the same number of elements as there
are MCMC draws in the corresponding model to use. Each numeric value is the
the nitrogen content in g g\eqn{^{-1}}. These values will be used to
predict the peat property.}
\item{3.}{\code{NULL}: Nitrogen content will be estimated from the spectra in \code{x}
and these estimates will be used to predict the peat property.}
}}

\item{y}{An object of class \code{\link[ir:ir_new_ir]{ir}} with transmission mid
infrared spectra. This argument is required for the following models which
need more than one set of spectra to make predictions:
\describe{
\item{\code{irp_microbial_nitrogen_content_1()}}{Here, \code{y} is a set of litter
spectra before decomposition.}
}}
}
\value{
\code{x} with a new column with the predicted peat property and a new
column with value \code{TRUE} if the respective spectrum is within the prediction
domain for the model and \code{FALSE} if not. If
\code{check_prediction_domain = "none"}, all values in this column are \code{NA}.
}
\description{
Functions to predict peat properties from transmission mid infrared spectra.
All functions below have been computed using peat samples. For detailed
information on the underlying prediction models, see the details section.
}
\details{
The models use the models of the same name in the 'irpeatmodels' package. The
'irpeatmodels' package provides information on the models.
}
\note{
\describe{
\item{\code{irp_eac_1()}, \code{irp_edc_1()}}{
The model still has a relatively large uncertainty because it is fitted
with few samples \insertCite{Teickner.2022}{irpeat}. For further
limitations, see \insertCite{Teickner.2022;textual}{irpeat}.
}
\item{\code{irp_microbial_nitrogen_content_1()}}{
\insertCite{Reuter.2020;textual}{irpeat} describes limitations and uncertainties:
“Small method modifications should be considered for the applicability of
the method in aerobic decomposition studies. These modifications include
an optimization of the calibration curve, either through the addition of
very low N litters to a decomposition study as calibration samples or
through the artificial mixing of undecomposed litter with microbial
biomass. Furthermore, the contribution of fungi must be considered, which
we assumed to be negligible in anoxic soils. Differences in the amount of
DNA per biomass units and in the C/N ratio should be considered for the
decomposer biomass in aerobic systems. Finally, the applicability of the
same calibration curve for decomposed litters of different plant species
still has to be investigated.”
}
}
}
\examples{
library(ir)

x <- ir::ir_sample_data[1, ]

## make predictions

# holocellulose content
x <- irpeat::irp_holocellulose_content_2(
  x,
  do_summary = TRUE,
  check_prediction_domain = "train"
)

# Klason lignin content
x <- irpeat::irp_klason_lignin_content_2(
  x,
  do_summary = TRUE,
  check_prediction_domain = "train"
)

# electron accepting capacity
x <- irpeat::irp_eac_1(
  x,
  do_summary = TRUE,
  check_prediction_domain = "train"
)

# electron donating capacity
x <- irpeat::irp_edc_1(
  x,
  do_summary = TRUE,
  check_prediction_domain = "train"
)

# carbon content
x <-
  irp_carbon_content_1(
    x,
    do_summary = TRUE,
    check_prediction_domain = "train"
  )

# nitrogen content
irpeat::irp_nitrogen_content_1(
  irpeat_sample_data[1, ],
  do_summary = TRUE,
  check_prediction_domain = "train"
)

# hydrogen content
irpeat::irp_hydrogen_content_1(
  irpeat_sample_data[1, ],
  do_summary = TRUE,
  check_prediction_domain = "train"
)

# oxygen content
irpeat::irp_oxygen_content_1(
  irpeat_sample_data[1, ],
  do_summary = TRUE,
  check_prediction_domain = "train"
)

# phosphorus content
irpeat::irp_phosphorus_content_1(
  irpeat_sample_data[1, ],
  do_summary = TRUE,
  check_prediction_domain = "train"
)

# potassium content
irpeat::irp_potassium_content_1(
  irpeat_sample_data[1, ],
  do_summary = TRUE,
  check_prediction_domain = "train"
)

# sulfur content
irpeat::irp_sulfur_content_1(
  irpeat_sample_data[1, ],
  do_summary = TRUE,
  check_prediction_domain = "train"
)

# titanium content
irpeat::irp_titanium_content_1(
  irpeat_sample_data[1, ],
  do_summary = TRUE,
  check_prediction_domain = "train"
)

# silicon content
irpeat::irp_silicon_content_1(
  irpeat_sample_data[1, ],
  do_summary = TRUE,
  check_prediction_domain = "train"
)

# calcium content
irpeat::irp_calcium_content_1(
  irpeat_sample_data[1, ],
  do_summary = TRUE,
  check_prediction_domain = "train"
)

# d13C values
irpeat::irp_d13C_1(
  irpeat_sample_data[1, ],
  do_summary = TRUE,
  check_prediction_domain = "train"
)

# d15N values
irpeat::irp_d15N_1(
  irpeat_sample_data[1, ],
  do_summary = TRUE,
  check_prediction_domain = "train"
)

# nominal oxidation state of carbon (NOSC)
irpeat::irp_nosc_1(
  irpeat_sample_data[1, ],
  do_summary = TRUE,
  check_prediction_domain = "train"
)

# Gibbs free energy of formation
irpeat::irp_dgf0_1(
  irpeat_sample_data[1, ],
  do_summary = TRUE,
  check_prediction_domain = "train"
)

# dry bulk density
irpeat::irp_bulk_density_1(
  irpeat_sample_data[1, ],
  do_summary = TRUE,
  check_prediction_domain = "train"
)

# loss on ignition
irp_loss_on_ignition_1(
  irpeat_sample_data[1, ],
  do_summary = TRUE,
  check_prediction_domain = "train"
)

# O/C
irpeat::irp_O_to_C_1(
  irpeat_sample_data[1, ],
  do_summary = TRUE,
  check_prediction_domain = "train"
)

# C/N
irpeat::irp_C_to_N_1(
  irpeat_sample_data[1, ],
  do_summary = TRUE,
  check_prediction_domain = "train"
)

# H/C
irpeat::irp_H_to_C_1(
  irpeat_sample_data[1, ],
  do_summary = TRUE,
  check_prediction_domain = "train"
)

# volume fraction of solids
irpeat::irp_volume_fraction_solids_1(
  irpeat_sample_data[1, ],
  do_summary = TRUE,
  check_prediction_domain = "train"
)

irpeat::irp_volume_fraction_solids_1(
  irpeat_sample_data[1, ],
  do_summary = TRUE,
  check_prediction_domain = "train",
  bulk_density = 0.04
)

# non-macroporosity
irpeat::irp_non_macroporosity_1(
  irpeat_sample_data[1, ],
  do_summary = TRUE,
  check_prediction_domain = "train"
)

irpeat::irp_non_macroporosity_1(
  irpeat_sample_data[1, ],
  do_summary = TRUE,
  check_prediction_domain = "train",
  bulk_density = 0.04
)

# macroporosity
irpeat::irp_macroporosity_1(
  irpeat_sample_data[1, ],
  do_summary = TRUE,
  check_prediction_domain = "train"
)

irpeat::irp_macroporosity_1(
  irpeat_sample_data[1, ],
  do_summary = TRUE,
  check_prediction_domain = "train",
  bulk_density = 0.04
)

# saturated hydraulic conductivity
irpeat::irp_saturated_hydraulic_conductivity_1(
  irpeat_sample_data[1, ],
  do_summary = TRUE,
  check_prediction_domain = "train"
)

irpeat::irp_saturated_hydraulic_conductivity_1(
  irpeat_sample_data[1, ],
  do_summary = TRUE,
  check_prediction_domain = "train",
  bulk_density = 0.04
)

# specific heat capacity
irpeat::irp_specific_heat_capacity_1(
  irpeat_sample_data[1, ],
  temperature = 290,
  do_summary = TRUE,
  check_prediction_domain = "train"
)

irpeat::irp_specific_heat_capacity_1(
  irpeat_sample_data[1, ],
  temperature = 290,
  do_summary = TRUE,
  check_prediction_domain = "train",
  nitrogen_content = irpeat_sample_data$N[1]
)

# dry thermal conductivity
irpeat::irp_dry_thermal_conductivity_1(
  irpeat_sample_data[1, ],
  do_summary = TRUE,
  check_prediction_domain = "train"
)

irpeat::irp_dry_thermal_conductivity_1(
  irpeat_sample_data[1, ],
  do_summary = TRUE,
  check_prediction_domain = "train",
  bulk_density = 0.04
)

# microbial nitrogen content (note that the data are not ideal uses cases for
# the model (see the documentation). The following only demonstrates how to
# use the prediction function)
irpeat::irp_microbial_nitrogen_content_1(
  x = irpeat_sample_data[1, ],
  y = irpeat_sample_data[2, ],
  do_summary = TRUE,
  check_prediction_domain = "train"
)

}
\references{
\insertAllCited{}
}
\seealso{
\code{irp_predict()}
}
